import { ILevel } from '../../interfaces/level';
import { VisualItemsTemplates } from './html-components-templates';

const visualTemplate = new VisualItemsTemplates();
export const levels: Record<number, ILevel> = {
    1: {
        number: 1,
        title: 'Select all roses by tag',
        desriptionTitle: 'Select by tag',
        descriptionValue: 'Select elements by their tag',
        examples: '',
        answer: [
            'rose',
            'body>*',
            'body*',
            'bodyrose',
            'body>rose',
            'rose:not(:has(:first-child))',
            'rose:nth-of-type(n+1)',
            'rose:nth-of-type(n)',
            'rose:nth-child(n)',
            'rose:nth-child(1),rose:nth-child(2),rose:nth-child(3)',
        ],
        sets: [
            { rose1: visualTemplate.animated },
            { rose2: visualTemplate.animated },
            { rose3: visualTemplate.animated },
        ],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `  &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt;`,
                ` &nbsp;&nbsp;&lt;rose&gt;&lt;/rose>`,
                `  &nbsp;&nbsp;&lt;rose>&lt;/rose&gt;`,
                `&lt;/body&gt;`,
            ],
        },
        setsIdenticClasses: ['rose1', 'rose2', 'rose3'],
        pseudoCodeIdenticClasses: ['body', 'rose1', 'rose2', 'rose3', 'body'],
    },
    2: {
        number: 2,
        title: 'Select the butterfly by ID',
        desriptionTitle: 'Select by ID',
        descriptionValue: 'Select elements by their ID',
        examples: '',
        answer: ['#blue', 'butterfly', 'rosebutterfly', 'rose>butterfly', 'butterfly:only-child'],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `  &nbsp;&nbsp;&lt;rose&gt;`,
                `&nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly id = "blue" >&lt;/butterfly&gt;`,
                `  &nbsp;&nbsp;&lt;/rose&gt;`,
                `  &nbsp;&nbsp;&lt;rose&gt;&lt;/rose>`,
                `  &nbsp;&nbsp;&lt;rose>&lt;/rose&gt;`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { rose1: visualTemplate.redRose, butterfly1: visualTemplate.blueFly },
            { rose2: visualTemplate.redRose },
            { rose3: visualTemplate.redRose },
        ],
        setsIdenticClasses: ['butterfly1'],
        pseudoCodeIdenticClasses: ['body', 'rose1', 'butterfly1', 'rose1', 'rose2', 'rose3', 'body'],
    },
    3: {
        number: 3,
        title: 'Select the butterfly on rose',
        desriptionTitle: ':only-child CSS pseudo-class',
        descriptionValue:
            'The :only-child CSS pseudo-class represents an element without any siblings. This is the same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity.',
        examples: '',
        answer: [
            'butterfly:only-child',
            'rose>butterfly',
            'butterfly',
            'body butterfly',
            'body>rose>butterfly',
            'rose+butterfly',
            'butterfly:nth-child(1)',
            'butterfly:only-of-type',
        ],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `  &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt`,
                `  &nbsp;&nbsp;&lt;rose&gt;&lt;/rose>`,
                `  &nbsp;&nbsp;&lt;rose>`,
                `&nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `&nbsp;&nbsp;&lt;/rose&gt;`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { rose1: visualTemplate.redRose },
            { rose2: visualTemplate.redRose },
            { rose3: visualTemplate.redRose, butterfly1: visualTemplate.blueFly },
        ],
        setsIdenticClasses: ['butterfly1'],
        pseudoCodeIdenticClasses: ['body', 'rose1', 'rose2', 'rose3', 'butterfly1', 'rose3', 'body'],
    },
    4: {
        number: 4,
        title: 'Select every second rose (even)',
        desriptionTitle: ':nth-of-type() CSS pseudo-class',
        descriptionValue:
            'The :nth-of-type() CSS pseudo-class matches elements based on their position among siblings of the same type (tag name).',
        examples: '',
        answer: ['rose:nth-of-type(even)', 'rose:nth-child(2n)', 'rose:nth-of-type(2n)', 'rose:nth-child(even)'],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,

                `       &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt`,
                `       &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt`,

                `       &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt`,
                `       &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt`,

                `       &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt`,
                `       &nbsp;&nbsp;&lt;rose&gt;`,
                `&nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `       &nbsp;&nbsp;&lt;/rose&gt`,

                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { rose1: visualTemplate.redRose },
            { rose2: visualTemplate.animated },
            { rose3: visualTemplate.redRose },
            { rose4: visualTemplate.animated },
            { rose5: visualTemplate.redRose },
            { rose6: visualTemplate.animated, butterfly1: visualTemplate.blueFlyStatic },
        ],
        setsIdenticClasses: ['rose2', 'rose4', 'rose6'],
        pseudoCodeIdenticClasses: [
            'body',
            'rose1',
            'rose2',
            'rose3',
            'rose4',
            'rose5',
            'rose6',
            'butterfly1',
            'rose6',
            'body',
        ],
    },
    5: {
        number: 5,
        title: 'Select the butterflies on the grass',
        desriptionTitle: ':not() CSS pseudo-class',
        descriptionValue:
            'The :not() CSS pseudo-class represents elements that do not match a list of selectors. Since it prevents specific items from being selected, it is known as the negation pseudo-class.',
        examples: '',
        answer: ['butterfly:not(:first-child)'],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `  &nbsp;&nbsp;&lt;rose&gt;&lt;/rose&gt`,
                `  &nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `  &nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `  &nbsp;&nbsp;&lt;rose>`,
                `&nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `&nbsp;&nbsp;&lt;/rose&gt;`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { rose1: visualTemplate.redRose },
            { butterfly1: visualTemplate.butterflyOnGrass },
            { butterfly2: visualTemplate.butterflyOnGrass },
            { rose2: visualTemplate.redRose, butterfly3: visualTemplate.blueFlyStatic },
        ],
        setsIdenticClasses: ['butterfly1', 'butterfly2'],
        pseudoCodeIdenticClasses: ['body', 'rose1', 'butterfly1', 'butterfly2', 'rose2', 'butterfly3', 'rose2', 'body'],
    },
    6: {
        number: 6,
        title: 'Select yellow roses with butterflies',
        desriptionTitle: ':has() CSS pseudo-class',
        descriptionValue:
            'The functional :has() CSS pseudo-class represents an element if any of the relative selectors that are passed as an argument match at least one element when anchored against this element. This pseudo-class presents a way of selecting a parent element or a previous sibling element with respect to a reference element by taking a relative selector list as an argument.',
        examples: '',
        answer: [
            'rose.yellow:has(butterfly)',
            'rose.yellow:has(*)',
            '.yellow:nth-of-type(-2n+4)',
            '.yellow:nth-of-type(2),.yellow:nth-of-type(4)',
            '.yellow:not(:first-of-type)',
        ],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `   &nbsp;&nbsp;&lt;rose class = "yellow" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "yellow" &gt;`,
                `       &nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `   &nbsp;&nbsp;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "yellow" &gt;`,
                `       &nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `   &nbsp;&nbsp;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;`,
                `       &nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `   &nbsp;&nbsp;&lt;/rose&gt`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { rose1: visualTemplate.yellowRose },
            { rose2: visualTemplate.yellowRoseAnimated, butterfly1: visualTemplate.blueFlyStatic },
            { rose3: visualTemplate.redRose },
            { rose4: visualTemplate.yellowRoseAnimated, butterfly2: visualTemplate.blueFlyStatic },
            { rose5: visualTemplate.redRose, butterfly3: visualTemplate.blueFlyStatic },
        ],
        setsIdenticClasses: ['rose2', 'rose4'],
        pseudoCodeIdenticClasses: [
            'body',
            'rose1',
            'rose2',
            'butterfly1',
            'rose2',
            'rose3',
            'rose4',
            'butterfly2',
            'rose4',
            'rose5',
            'butterfly3',
            'rose5',
            'body',
        ],
    },
    7: {
        number: 7,
        title: 'Select yellow roses for bouquet',
        desriptionTitle: 'CSS attribute selector',
        descriptionValue:
            'The CSS attribute selector matches elements based on the element having a given attribute explicitly set, with options for defining an attribute value or substring value match.',
        examples: '',
        answer: [
            'rose.[data-purpouse*="bouquet"]',
            `.yellow[data-purpouse*="bouquet"],.red[data-purpouse*="bouquet"]`,
            `*[data-purpouse*="bouquet"]`,
            `.yellow[data-purpouse*="bouquet"],.red[data-purpouse*="bouquet"]`,
            'rose[data-purpouse=`yellow-bouquet`],rose[data-purpouse=`red-bouquet`]',
        ],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `   &nbsp;&nbsp;&lt;rose class = "yellow" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "yellow" data-purpose = "yellow-bouquet" &gt;`,
                `       &nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `   &nbsp;&nbsp;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" data-purpose = "red-bouquet" &gt;`,
                `       &nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `   &nbsp;&nbsp;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" data-purpose = "red-bouquet" &gt;&lt;/rose&gt`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { rose1: visualTemplate.yellowRose },
            { rose2: visualTemplate.yellowRoseAnimated, butterfly1: visualTemplate.blueFlyStatic },
            { rose3: visualTemplate.redRose },
            { rose4: visualTemplate.animated, butterfly2: visualTemplate.blueFlyStatic },
            { rose5: visualTemplate.animated },
        ],
        setsIdenticClasses: ['rose2', 'rose4', 'rose5'],
        pseudoCodeIdenticClasses: [
            'body',
            'rose1',
            'rose2',
            'butterfly1',
            'rose2',
            'rose3',
            'rose4',
            'butterfly2',
            'rose4',
            'rose5',
            'body',
        ],
    },
    8: {
        number: 8,
        title: 'Select all elements without children',
        desriptionTitle: ':empty CSS pseudo-class',
        descriptionValue:
            'The :empty CSS pseudo-class represents any element that has no children. Children can be either element nodes or text (including whitespace). Comments, processing instructions, and CSS content do not affect whether an element is considered empty.',
        examples: '',
        answer: ['*:empty', `.red,h3,.yellow:last-of-type`, `.red,h3,.yellow:nth-of-type(odd)`],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "yellow" &gt;`,
                `       &nbsp;&nbsp;&nbsp;&nbsp;&lt;butterfly>&lt;/butterfly&gt;`,
                `   &nbsp;&nbsp;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "yellow" &gt;&lt;/rose&gt`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { rose1: visualTemplate.animated },
            { butterfly1: visualTemplate.butterflyOnGrass },
            { rose2: visualTemplate.yellowRose, butterfly2: visualTemplate.blueFly },
            { butterfly3: visualTemplate.butterflyOnGrass },
            { butterfly4: visualTemplate.butterflyOnGrass },
            { rose3: visualTemplate.yellowRoseAnimated },
        ],
        setsIdenticClasses: ['rose1', 'butterfly1', 'butterfly2', 'butterfly3', 'butterfly4', 'rose3'],
        pseudoCodeIdenticClasses: [
            'body',
            'rose1',
            'butterfly1',
            'rose2',
            'butterfly2',
            'rose2',
            'butterfly3',
            'butterfly4',
            'rose3',
        ],
    },
    9: {
        number: 9,
        title: 'Select the butterfly which is after a red rose',
        desriptionTitle: '(A + B) adjacent sibling combinator',
        descriptionValue:
            'The + combinator matches the second element only if it immediately follows the first element.',
        examples: '',
        answer: ['.red+butterfly', `rose+butterfly`, `butterfly:nth-of-type(2)`],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { butterfly1: visualTemplate.blueFlyStaticGrass },
            { rose1: visualTemplate.redRose },
            { rose2: visualTemplate.redRose },
            { butterfly2: visualTemplate.butterflyOnGrass },
            { butterfly3: visualTemplate.blueFlyStaticGrass },
            { butterfly4: visualTemplate.blueFlyStaticGrass },
        ],
        setsIdenticClasses: ['butterfly2'],
        pseudoCodeIdenticClasses: [
            'body',
            'butterfly1',
            'rose1',
            'rose2',
            'butterfly2',
            'butterfly3',
            'butterfly4',
            'body',
        ],
    },
    10: {
        number: 10,
        title: 'Select all butterflies which are after a red rose',
        desriptionTitle: '(A ~ B) siblings combinator',
        descriptionValue:
            'The ~ combinator selects siblings. This means that the second element follows the first (though not necessarily immediately), and both share the same parent.',
        examples: '',
        answer: ['.red~butterfly', `rose~butterfly`, `butterfly:nth-of-type(2)`],
        htmlViver: {
            pseudoCode: [
                `&lt;body&gt;`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;rose class = "red" &gt;&lt;/rose&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `   &nbsp;&nbsp;&lt;butterfly &gt;&lt;/butterfly&gt`,
                `&lt;/body&gt;`,
            ],
        },
        sets: [
            { butterfly1: visualTemplate.blueFlyStaticGrass },
            { rose1: visualTemplate.redRose },
            { rose2: visualTemplate.redRose },
            { butterfly2: visualTemplate.butterflyOnGrass },
            { butterfly3: visualTemplate.butterflyOnGrass },
            { butterfly4: visualTemplate.butterflyOnGrass },
        ],
        setsIdenticClasses: ['butterfly2', 'butterfly3', 'butterfly4'],
        pseudoCodeIdenticClasses: [
            'body',
            'butterfly1',
            'rose1',
            'rose2',
            'butterfly2',
            'butterfly3',
            'butterfly4',
            'body',
        ],
    },
};
